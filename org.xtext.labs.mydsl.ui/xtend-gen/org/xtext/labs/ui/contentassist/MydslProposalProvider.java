/**
 * generated by Xtext 2.12.0
 */
package org.xtext.labs.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.xtext.labs.mydsl.DoWhileExpression;
import org.xtext.labs.mydsl.IfExpression;
import org.xtext.labs.ui.contentassist.AbstractMydslProposalProvider;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 * 
 * @comment:kim
 * this function will be activate when you press ctrl + space for complete token.
 */
@SuppressWarnings("all")
public class MydslProposalProvider extends AbstractMydslProposalProvider {
  @Override
  public void complete_oper(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    boolean isView = true;
    if (((model.eContainer() instanceof IfExpression) || (model.eContainer() instanceof DoWhileExpression))) {
      if ((model.eContainingFeature().getName().equals("ifconditon") || 
        model.eContainingFeature().getName().equals("loopConditon"))) {
        acceptor.accept(this.createCompletionProposal(">=", context));
        acceptor.accept(this.createCompletionProposal("<=", context));
        acceptor.accept(this.createCompletionProposal("==", context));
        acceptor.accept(this.createCompletionProposal("!=", context));
        acceptor.accept(this.createCompletionProposal("<", context));
        acceptor.accept(this.createCompletionProposal(">", context));
        isView = false;
      }
    }
    if (isView) {
      acceptor.accept(this.createCompletionProposal("+", context));
      acceptor.accept(this.createCompletionProposal("-", context));
      acceptor.accept(this.createCompletionProposal("*", context));
      acceptor.accept(this.createCompletionProposal("/", context));
      acceptor.accept(this.createCompletionProposal("=", context));
    }
  }
  
  @Override
  public void complete_Terminal(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    this.functionListAccept(context, acceptor);
  }
  
  public void functionListAccept(final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("printstr", context));
    acceptor.accept(this.createCompletionProposal("strjoin", context));
    acceptor.accept(this.createCompletionProposal("strsplit", context));
    acceptor.accept(this.createCompletionProposal("numtostr", context));
    acceptor.accept(this.createCompletionProposal("equals", context));
  }
  
  @Override
  public void completeVarDeclared_Type(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("num", context));
    acceptor.accept(this.createCompletionProposal("string", context));
    acceptor.accept(this.createCompletionProposal("bool", context));
  }
}
