/**
 * generated by Xtext 2.12.0
 */
package org.xtext.labs.ui.labeling;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.xbase.ui.labeling.XbaseLabelProvider;
import org.xtext.labs.mydsl.AbstractMethodCall;
import org.xtext.labs.mydsl.DoWhileExpression;
import org.xtext.labs.mydsl.FuncCall;
import org.xtext.labs.mydsl.FuncDefinition;
import org.xtext.labs.mydsl.FuncParameter;
import org.xtext.labs.mydsl.IfExpression;
import org.xtext.labs.mydsl.StdFunction;
import org.xtext.labs.mydsl.StringRef;
import org.xtext.labs.mydsl.Terminal;
import org.xtext.labs.mydsl.TerminalOrMethod;
import org.xtext.labs.mydsl.boolRef;
import org.xtext.labs.mydsl.numRef;
import org.xtext.labs.mydsl.varAssignment;
import org.xtext.labs.mydsl.varDeclared;
import org.xtext.labs.mydsl.varExpression;

/**
 * @comment:kim
 * this label will be used in Outline view.
 */
@SuppressWarnings("all")
public class MydslLabelProvider extends XbaseLabelProvider {
  @Inject
  public MydslLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String image(final FuncDefinition func) {
    return "dsl_workset.gif";
  }
  
  public String text(final varDeclared pd) {
    String _type = pd.getType();
    String _plus = (_type + " ");
    String _name = pd.getName();
    return (_plus + _name);
  }
  
  public String text(final IfExpression cond) {
    String _xblockexpression = null;
    {
      String exprLabel = "";
      final varExpression expr = cond.getIfconditon();
      if ((expr instanceof varAssignment)) {
        Object _decoupleExprName = this.decoupleExprName(((varAssignment)expr).getLeft());
        String _plus = (_decoupleExprName + " ");
        String _get = ((varAssignment)expr).getOp().get(0);
        String _plus_1 = (_plus + _get);
        String _plus_2 = (_plus_1 + " ");
        Object _decoupleExtendExprName = this.decoupleExtendExprName(((varAssignment)expr).getRight());
        String _plus_3 = (_plus_2 + _decoupleExtendExprName);
        exprLabel = _plus_3;
      }
      _xblockexpression = ("if " + exprLabel);
    }
    return _xblockexpression;
  }
  
  public Object decoupleExprName(final Terminal t) {
    Object _xifexpression = null;
    if ((t instanceof StringRef)) {
      _xifexpression = ((StringRef)t).getValue();
    } else {
      Object _xifexpression_1 = null;
      if ((t instanceof numRef)) {
        _xifexpression_1 = Integer.valueOf(((numRef)t).getValue());
      } else {
        String _xifexpression_2 = null;
        if ((t instanceof boolRef)) {
          _xifexpression_2 = ((boolRef)t).getVarRef();
        } else {
          String _xblockexpression = null;
          {
            final EObject cref = t.eCrossReferences().get(0);
            if ((cref instanceof varDeclared)) {
              int _size = ((varDeclared)cref).getDim().size();
              boolean _greaterThan = (_size > 0);
              if (_greaterThan) {
                String _name = ((varDeclared)cref).getName();
                /* (_name + "[]"); */
              } else {
                ((varDeclared)cref).getName();
              }
            }
            String _xifexpression_3 = null;
            if ((cref instanceof FuncParameter)) {
              _xifexpression_3 = ((FuncParameter)cref).getName();
            }
            _xblockexpression = _xifexpression_3;
          }
          _xifexpression_2 = _xblockexpression;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = ((Object)_xifexpression_1);
    }
    return _xifexpression;
  }
  
  public Object decoupleExtendExprName(final EList<TerminalOrMethod> t) {
    Object _xifexpression = null;
    if ((t != null)) {
      Object _xblockexpression = null;
      {
        final TerminalOrMethod ta = t.get(0);
        Object _xifexpression_1 = null;
        if ((ta instanceof Terminal)) {
          _xifexpression_1 = this.decoupleExprName(((Terminal)ta));
        } else {
          String _xifexpression_2 = null;
          if ((ta instanceof AbstractMethodCall)) {
            String _xifexpression_3 = null;
            if ((ta instanceof StdFunction)) {
              String _text = this.getText(ta);
              _xifexpression_3 = (_text + "()");
            } else {
              String _xifexpression_4 = null;
              if ((ta instanceof FuncCall)) {
                String _text_1 = this.getText(ta);
                _xifexpression_4 = (_text_1 + "()");
              }
              _xifexpression_3 = _xifexpression_4;
            }
            _xifexpression_2 = _xifexpression_3;
          }
          _xifexpression_1 = _xifexpression_2;
        }
        _xblockexpression = _xifexpression_1;
      }
      _xifexpression = _xblockexpression;
    }
    return _xifexpression;
  }
  
  public String text(final DoWhileExpression cond) {
    String _xblockexpression = null;
    {
      String exprLabel = "";
      final varExpression expr = cond.getLoopConditon();
      if ((expr instanceof varAssignment)) {
        Object _decoupleExprName = this.decoupleExprName(((varAssignment)expr).getLeft());
        String _plus = (_decoupleExprName + " ");
        String _get = ((varAssignment)expr).getOp().get(0);
        String _plus_1 = (_plus + _get);
        String _plus_2 = (_plus_1 + " ");
        Object _decoupleExtendExprName = this.decoupleExtendExprName(((varAssignment)expr).getRight());
        String _plus_3 = (_plus_2 + _decoupleExtendExprName);
        exprLabel = _plus_3;
      }
      _xblockexpression = ("while " + exprLabel);
    }
    return _xblockexpression;
  }
  
  public String text(final StdFunction func) {
    return func.getName();
  }
}
