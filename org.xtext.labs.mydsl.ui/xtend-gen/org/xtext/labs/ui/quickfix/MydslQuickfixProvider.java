/**
 * generated by Xtext 2.12.0
 */
package org.xtext.labs.ui.quickfix;

import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.ui.quickfix.XbaseQuickfixProvider;
import org.xtext.labs.validation.MydslValidator;

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
@SuppressWarnings("all")
public class MydslQuickfixProvider extends XbaseQuickfixProvider {
  @Fix(MydslValidator.INVALID_BREAK)
  public void removeBreakStr(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      xtextDocument.replace((issue.getOffset()).intValue(), 5, "");
    };
    acceptor.accept(issue, "Remove Break", "Remove Break.", "dsl_fix.gif", _function);
  }
  
  @Fix(MydslValidator.INVALID_DUPLICATE)
  public void removeDuplicateVar(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "");
    };
    acceptor.accept(issue, "Remove Duplicated Variable", "Remove Duplicated Variable.", "dsl_fix.gif", _function);
  }
  
  @Fix(MydslValidator.INVALID_FUNCTION_DUPLICATE)
  public void removeDuplicateSub(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      final String doc = xtextDocument.get((issue.getOffset()).intValue(), 200);
      String subName = doc.trim();
      subName = subName.substring(0, subName.indexOf("\n"));
      xtextDocument.replace((issue.getOffset()).intValue(), subName.length(), ("SUB_" + subName));
    };
    acceptor.accept(issue, "Remove Duplicated Function name", "Remove Duplicated Function name.", "dsl_fix.gif", _function);
  }
  
  @Fix(MydslValidator.INVALID_TYPES)
  public void removeInValidType(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument xtextDocument = context.getXtextDocument();
      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), "");
    };
    acceptor.accept(issue, "Remove Incompatible Variable", "Remove Incompatible Variable.", "dsl_fix.gif", _function);
  }
}
