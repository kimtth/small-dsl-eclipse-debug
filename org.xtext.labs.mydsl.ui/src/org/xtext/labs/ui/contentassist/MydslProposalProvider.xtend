/*
 * generated by Xtext 2.12.0
 */
package org.xtext.labs.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.RuleCall
import org.xtext.labs.mydsl.IfExpression
import org.xtext.labs.mydsl.DoWhileExpression

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 * 
 * @comment:kim
 * this function will be activate when you press ctrl + space for complete token.
 */
class MydslProposalProvider extends AbstractMydslProposalProvider {

	override void complete_oper(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {

		var isView = true
		if (model.eContainer instanceof IfExpression || model.eContainer instanceof DoWhileExpression) {
			if (model.eContainingFeature.name.equals("ifconditon") ||
				model.eContainingFeature.name.equals("loopConditon")) {
				acceptor.accept(createCompletionProposal(">=", context))
				acceptor.accept(createCompletionProposal("<=", context))
				acceptor.accept(createCompletionProposal("==", context))
				acceptor.accept(createCompletionProposal("!=", context))
				acceptor.accept(createCompletionProposal("<", context))
				acceptor.accept(createCompletionProposal(">", context))
				isView = false
			}
		}

		if (isView) {
			acceptor.accept(createCompletionProposal("+", context))
			acceptor.accept(createCompletionProposal("-", context))
			acceptor.accept(createCompletionProposal("*", context))
			acceptor.accept(createCompletionProposal("/", context))
			acceptor.accept(createCompletionProposal("=", context))
		}
	}

	override void complete_Terminal(EObject model, RuleCall ruleCall, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		functionListAccept(context, acceptor)
	}
	
	def functionListAccept(ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("printstr", context))
		acceptor.accept(createCompletionProposal("strjoin", context))
		acceptor.accept(createCompletionProposal("strsplit", context))
		acceptor.accept(createCompletionProposal("numtostr", context))
		acceptor.accept(createCompletionProposal("equals", context))
	}

	override void completeVarDeclared_Type(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("num", context))
		acceptor.accept(createCompletionProposal("string", context))
		acceptor.accept(createCompletionProposal("bool", context))
	}
}
