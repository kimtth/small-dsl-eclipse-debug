/*
 * generated by Xtext 2.12.0
 */
package org.xtext.labs.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.xbase.ui.labeling.XbaseLabelProvider
import org.xtext.labs.mydsl.AbstractMethodCall
import org.xtext.labs.mydsl.DoWhileExpression
import org.xtext.labs.mydsl.FuncCall
import org.xtext.labs.mydsl.FuncDefinition
import org.xtext.labs.mydsl.FuncParameter
import org.xtext.labs.mydsl.IfExpression
import org.xtext.labs.mydsl.StdFunction
import org.xtext.labs.mydsl.StringRef
import org.xtext.labs.mydsl.Terminal
import org.xtext.labs.mydsl.TerminalOrMethod
import org.xtext.labs.mydsl.boolRef
import org.xtext.labs.mydsl.numRef
import org.xtext.labs.mydsl.varAssignment
import org.xtext.labs.mydsl.varDeclared

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
/**
 * @comment:kim
 * this label will be used in Outline view.
 */
class MydslLabelProvider extends XbaseLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def image(FuncDefinition func) {
		return "dsl_workset.gif";
	}

	def text(varDeclared pd) {
		pd.type + ' ' + pd.name
	}

	def text(IfExpression cond) {
		var exprLabel = ""
		val expr = cond.getIfconditon()

		if (expr instanceof varAssignment) {
			exprLabel = decoupleExprName(expr.left) + " " + expr.op.get(0) + " " + decoupleExtendExprName(expr.right)
		}

		'if ' + exprLabel
	}

	def decoupleExprName(Terminal t) {
		if (t instanceof StringRef) {
			t.value
		} else if (t instanceof numRef) {
			t.value
		} else if (t instanceof boolRef) {
			t.varRef
		} else {
			val cref = t.eCrossReferences.get(0)

			if (cref instanceof varDeclared) {
				if (cref.dim.size > 0) {
					cref.name + "[]"
				} else {
					cref.name
				}
			}

			if (cref instanceof FuncParameter) {
				cref.name
			}
		}
	}

	def decoupleExtendExprName(EList<TerminalOrMethod> t) {
		if (t !== null) {
			val ta = t.get(0)

			if (ta instanceof Terminal) {
				decoupleExprName(ta)
			} else if (ta instanceof AbstractMethodCall) {
				if (ta instanceof StdFunction) {
					ta.getText + "()"
				} else if (ta instanceof FuncCall) {
					ta.getText + "()"
				}
			}
		}
	}

	def text(DoWhileExpression cond) {
		var exprLabel = ""
		val expr = cond.getLoopConditon()

		if (expr instanceof varAssignment) {
			exprLabel = decoupleExprName(expr.left) + " " + expr.op.get(0) + " " + decoupleExtendExprName(expr.right)
		}

		'while ' + exprLabel
	}

	def text(StdFunction func) {
		func.name
	}

}
