/**
 * generated by Xtext 2.11.0
 */
package org.xtext.labs.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import com.google.inject.Inject;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.labs.generator.MydslGeneratorCS;
import org.xtext.labs.mydsl.AbstractMethodCall;
import org.xtext.labs.mydsl.BodyStatement;
import org.xtext.labs.mydsl.BrkStr;
import org.xtext.labs.mydsl.DSLProgram;
import org.xtext.labs.mydsl.DoWhileExpression;
import org.xtext.labs.mydsl.FuncCall;
import org.xtext.labs.mydsl.FuncDefinition;
import org.xtext.labs.mydsl.FuncParameter;
import org.xtext.labs.mydsl.IfExpression;
import org.xtext.labs.mydsl.StdFunction;
import org.xtext.labs.mydsl.StringRef;
import org.xtext.labs.mydsl.Terminal;
import org.xtext.labs.mydsl.TerminalOrMethod;
import org.xtext.labs.mydsl.arrayDimension;
import org.xtext.labs.mydsl.arrayRef;
import org.xtext.labs.mydsl.boolRef;
import org.xtext.labs.mydsl.numRef;
import org.xtext.labs.mydsl.varAssignment;
import org.xtext.labs.mydsl.varDeclared;
import org.xtext.labs.mydsl.varExpression;
import org.xtext.labs.mydsl.varRef;
import org.xtext.labs.mydsl.varReturn;
import org.xtext.labs.mydsl.varSymbol;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MydslGenerator extends AbstractGenerator {
  @Inject
  private MydslGeneratorCS csgen;
  
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final String path = input.getURI().path();
    String _string = path.toString();
    int _lastIndexOf = path.lastIndexOf("/");
    int _plus = (_lastIndexOf + 1);
    final String filepath = _string.substring(_plus);
    final String filename = filepath.replace(".dsl", "");
    Iterator<DSLProgram> java = Iterators.<DSLProgram>filter(input.getAllContents(), DSLProgram.class);
    final Procedure1<DSLProgram> _function = (DSLProgram item) -> {
      fsa.generateFile((filename + ".java"), this.compileJava(item, filename));
    };
    IteratorExtensions.<DSLProgram>forEach(java, _function);
    Iterator<DSLProgram> cs = Iterators.<DSLProgram>filter(input.getAllContents(), DSLProgram.class);
    final Procedure1<DSLProgram> _function_1 = (DSLProgram item) -> {
      fsa.generateFile((filename + ".cs"), this.csgen.compileCsharp(item, filename));
    };
    IteratorExtensions.<DSLProgram>forEach(cs, _function_1);
  }
  
  /**
   * @comment: kim
   * Tip:
   * 1. when xtext attr name has var, hat^ can be used as a wild card ex) var+=varDeclared* => dsl.^var
   * 2. xtend doesn't have break and continue
   * 3. xtend can't return Object.
   */
  public CharSequence compileJava(final DSLProgram dsl, final String fileName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("this java file is generated from ");
    String _titleCase = this.toTitleCase(fileName);
    _builder.append(_titleCase);
    _builder.append(".dsl. the generator was written by kim.");
    _builder.newLineIfNotEmpty();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _replace = fileName.replace("-", "");
    _builder.append(_replace);
    _builder.append("{\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static Map<String, String> map = new HashMap<>();");
    _builder.newLine();
    _builder.newLine();
    {
      EList<varDeclared> _global = dsl.getGlobal();
      boolean _tripleNotEquals = (_global != null);
      if (_tripleNotEquals) {
        {
          EList<varDeclared> _global_1 = dsl.getGlobal();
          for(final varDeclared param : _global_1) {
            _builder.append("\t");
            String _compilevarDeclaredGlobal = this.compilevarDeclaredGlobal(param);
            _builder.append(_compilevarDeclaredGlobal, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    {
      EList<FuncDefinition> _func = dsl.getFunc();
      for(final FuncDefinition func : _func) {
        _builder.append("\t");
        _builder.append("private static ");
        String _rtnType = this.rtnType(func);
        _builder.append(_rtnType, "\t");
        _builder.append(" ");
        String _name = func.getName();
        _builder.append(_name, "\t");
        _builder.append("(");
        String _compileArgDeclaration2 = this.compileArgDeclaration2(func.getArgs());
        _builder.append(_compileArgDeclaration2, "\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        {
          EList<BodyStatement> _body = func.getBody();
          for(final BodyStatement body : _body) {
            _builder.append("\t");
            String _compileBodyStatement = this.compileBodyStatement(body);
            _builder.append(_compileBodyStatement, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@SuppressWarnings(\"unused\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String args[]){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("init(args);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    {
      EList<BodyStatement> _body_1 = dsl.getMain().getBody();
      for(final BodyStatement body_1 : _body_1) {
        _builder.append("\t");
        String _compileBodyStatement_1 = this.compileBodyStatement(body_1);
        _builder.append(_compileBodyStatement_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    String _stdfunctionModelBuilder = this.stdfunctionModelBuilder();
    _builder.append(_stdfunctionModelBuilder, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public String rtnType(final FuncDefinition d) {
    String buf = "void";
    EList<BodyStatement> _body = d.getBody();
    for (final BodyStatement p : _body) {
      if ((p instanceof varReturn)) {
        final String t = this.TerminalTypeResolver(((varReturn)p).getRtn());
        buf = this.typeName(t);
      }
    }
    return buf;
  }
  
  public String TerminalTypeResolver(final Terminal t) {
    String buf = "";
    if ((t instanceof varRef)) {
      final varSymbol sb = ((varRef)t).getVarRef();
      buf = sb.getType();
    }
    if ((t instanceof arrayRef)) {
      final varSymbol sb_1 = ((arrayRef)t).getVarRef();
      buf = sb_1.getType();
    }
    return buf;
  }
  
  public String compilevarDeclaredGlobal(final varDeclared p) {
    String buf = "static ";
    boolean isDim = false;
    int _length = ((Object[])Conversions.unwrapArray(p.getDim(), Object.class)).length;
    boolean _notEquals = (_length != 0);
    if (_notEquals) {
      isDim = true;
    }
    String _buf = buf;
    String _typeName = this.typeName(p.getType());
    buf = (_buf + _typeName);
    String _buf_1 = buf;
    String _name = p.getName();
    String _plus = (" " + _name);
    buf = (_buf_1 + _plus);
    if (isDim) {
      EList<arrayDimension> _dim = p.getDim();
      for (final arrayDimension d : _dim) {
        String _buf_2 = buf;
        buf = (_buf_2 + "[]");
      }
      String _buf_3 = buf;
      buf = (_buf_3 + " = new ");
      String _buf_4 = buf;
      String _typeName_1 = this.typeName(p.getType());
      buf = (_buf_4 + _typeName_1);
      EList<arrayDimension> _dim_1 = p.getDim();
      for (final arrayDimension d_1 : _dim_1) {
        {
          String _buf_5 = buf;
          String _string = Integer.valueOf(d_1.getSize()).toString();
          String _plus_1 = ("[" + _string);
          String _plus_2 = (_plus_1 + "]");
          buf = (_buf_5 + _plus_2);
          int _length_1 = ((Object[])Conversions.unwrapArray(p.getDim(), Object.class)).length;
          int _lastIndexOf = p.getDim().lastIndexOf(d_1);
          int _plus_3 = (_lastIndexOf + 1);
          boolean _equals = (_length_1 == _plus_3);
          if (_equals) {
            String _buf_6 = buf;
            buf = (_buf_6 + ";");
          }
        }
      }
    }
    if ((!isDim)) {
      String _type = p.getType();
      boolean _equals = Objects.equal(_type, "string");
      if (_equals) {
        String _buf_5 = buf;
        buf = (_buf_5 + " = \"\";");
      } else {
        String _type_1 = p.getType();
        boolean _equals_1 = Objects.equal(_type_1, "bool");
        if (_equals_1) {
          String _buf_6 = buf;
          buf = (_buf_6 + " = false;");
        } else {
          String _buf_7 = buf;
          buf = (_buf_7 + " = 0;");
        }
      }
    }
    return buf;
  }
  
  public String compileArgDeclaration2(final EList<FuncParameter> pl) {
    String buf = "";
    for (final FuncParameter p : pl) {
      {
        String _buf = buf;
        String _typeName = this.typeName(p.getType());
        buf = (_buf + _typeName);
        String _buf_1 = buf;
        String _name = p.getName();
        String _plus = (" " + _name);
        buf = (_buf_1 + _plus);
        int _length = ((Object[])Conversions.unwrapArray(pl, Object.class)).length;
        int _lastIndexOf = pl.lastIndexOf(p);
        int _plus_1 = (_lastIndexOf + 1);
        boolean _notEquals = (_length != _plus_1);
        if (_notEquals) {
          String _buf_2 = buf;
          buf = (_buf_2 + ",");
        }
      }
    }
    return buf;
  }
  
  public String compileArgDeclaration(final EList<varDeclared> pl) {
    String buf = "";
    for (final varDeclared p : pl) {
      {
        buf = this.typeName(p.getType());
        int _length = ((Object[])Conversions.unwrapArray(p.getDim(), Object.class)).length;
        boolean _notEquals = (_length != 0);
        if (_notEquals) {
          EList<arrayDimension> _dim = p.getDim();
          for (final arrayDimension d : _dim) {
            String _buf = buf;
            buf = (_buf + "[]");
          }
        }
        String _buf_1 = buf;
        String _name = p.getName();
        String _plus = (" " + _name);
        buf = (_buf_1 + _plus);
        int _length_1 = ((Object[])Conversions.unwrapArray(pl, Object.class)).length;
        int _lastIndexOf = pl.lastIndexOf(p);
        int _plus_1 = (_lastIndexOf + 1);
        boolean _notEquals_1 = (_length_1 != _plus_1);
        if (_notEquals_1) {
          String _buf_2 = buf;
          buf = (_buf_2 + ",");
        }
      }
    }
    return buf;
  }
  
  public String compilevarDeclared(final varDeclared p) {
    String buf = "";
    boolean isDim = false;
    int _length = ((Object[])Conversions.unwrapArray(p.getDim(), Object.class)).length;
    boolean _notEquals = (_length != 0);
    if (_notEquals) {
      isDim = true;
    }
    buf = this.typeName(p.getType());
    String _buf = buf;
    String _name = p.getName();
    String _plus = (" " + _name);
    buf = (_buf + _plus);
    if (isDim) {
      EList<arrayDimension> _dim = p.getDim();
      for (final arrayDimension d : _dim) {
        String _buf_1 = buf;
        buf = (_buf_1 + "[]");
      }
      String _buf_2 = buf;
      buf = (_buf_2 + " = new ");
      String _buf_3 = buf;
      String _typeName = this.typeName(p.getType());
      buf = (_buf_3 + _typeName);
      EList<arrayDimension> _dim_1 = p.getDim();
      for (final arrayDimension d_1 : _dim_1) {
        {
          String _buf_4 = buf;
          String _string = Integer.valueOf(d_1.getSize()).toString();
          String _plus_1 = ("[" + _string);
          String _plus_2 = (_plus_1 + "]");
          buf = (_buf_4 + _plus_2);
          int _length_1 = ((Object[])Conversions.unwrapArray(p.getDim(), Object.class)).length;
          int _lastIndexOf = p.getDim().lastIndexOf(d_1);
          int _plus_3 = (_lastIndexOf + 1);
          boolean _equals = (_length_1 == _plus_3);
          if (_equals) {
            String _buf_5 = buf;
            buf = (_buf_5 + ";");
          }
        }
      }
    }
    if ((!isDim)) {
      String _type = p.getType();
      boolean _equals = Objects.equal(_type, "string");
      if (_equals) {
        String _buf_4 = buf;
        buf = (_buf_4 + " = \"\";");
      } else {
        String _type_1 = p.getType();
        boolean _equals_1 = Objects.equal(_type_1, "bool");
        if (_equals_1) {
          String _buf_5 = buf;
          buf = (_buf_5 + " = false;");
        } else {
          String _buf_6 = buf;
          buf = (_buf_6 + " = 0;");
        }
      }
    }
    return buf;
  }
  
  public String compileBodyStatement(final BodyStatement b) {
    String _switchResult = null;
    boolean _matched = false;
    if (b instanceof varExpression) {
      _matched=true;
      _switchResult = this.compileVarExpression(((varExpression)b));
    }
    if (!_matched) {
      if (b instanceof IfExpression) {
        _matched=true;
        _switchResult = this.compileIfExpression(((IfExpression)b));
      }
    }
    if (!_matched) {
      if (b instanceof DoWhileExpression) {
        _matched=true;
        _switchResult = this.compileDoWhileExpression(((DoWhileExpression)b));
      }
    }
    if (!_matched) {
      if (b instanceof BrkStr) {
        _matched=true;
        _switchResult = this.brkStr(((BrkStr)b));
      }
    }
    if (!_matched) {
      if (b instanceof AbstractMethodCall) {
        _matched=true;
        _switchResult = this.compileAbstractMethod(((AbstractMethodCall)b));
      }
    }
    if (!_matched) {
      if (b instanceof varDeclared) {
        _matched=true;
        _switchResult = this.compilevarDeclared(((varDeclared)b));
      }
    }
    if (!_matched) {
      if (b instanceof varReturn) {
        _matched=true;
        _switchResult = this.returnStr(((varReturn)b));
      }
    }
    return _switchResult;
  }
  
  public String returnStr(final varReturn b) {
    String buf = "return ";
    String _buf = buf;
    String _TerminalMatchFinder = this.TerminalMatchFinder(b.getRtn());
    buf = (_buf + _TerminalMatchFinder);
    String _buf_1 = buf;
    buf = (_buf_1 + ";");
    return buf;
  }
  
  public String compileVarExpression(final varExpression r) {
    StringBuilder buf = new StringBuilder();
    if ((r instanceof varAssignment)) {
      buf.append(this.TerminalMatchFinder(((varAssignment)r).getLeft()));
      EList<String> _op = ((varAssignment)r).getOp();
      for (final String op : _op) {
        {
          String opStr = op;
          boolean _equals = op.equals("and");
          if (_equals) {
            opStr = "&";
          } else {
            boolean _equals_1 = op.equals("or");
            if (_equals_1) {
              opStr = "|";
            }
          }
          buf.append(((" " + opStr) + " "));
          final TerminalOrMethod a = ((varAssignment)r).getRight().get(((varAssignment)r).getOp().indexOf(op));
          if ((a instanceof Terminal)) {
            buf.append(this.TerminalMatchFinder(((Terminal)a)));
          } else {
            if ((a instanceof AbstractMethodCall)) {
              String func = this.compileAbstractMethod(((AbstractMethodCall)a));
              EObject _eContainer = ((varAssignment)r).eContainer();
              if ((_eContainer instanceof IfExpression)) {
                func = func.replace(";", "");
              }
              buf.append(func);
            }
          }
        }
      }
    }
    Boolean _isColon = this.isColon(r);
    if ((_isColon).booleanValue()) {
      buf.append(";");
    }
    return buf.toString().replace(";;", ";");
  }
  
  public String compileFunction(final FuncCall s) {
    String buf = "";
    StringConcatenation _builder = new StringConcatenation();
    String _funcName = this.funcName(s);
    _builder.append(_funcName);
    _builder.append("(");
    buf = _builder.toString();
    EList<Terminal> _args = s.getArgs();
    for (final Terminal p : _args) {
      if ((p instanceof varRef)) {
        String _buf = buf;
        String _name = ((varRef)p).getVarRef().getName();
        buf = (_buf + _name);
        int _length = ((Object[])Conversions.unwrapArray(s.getArgs(), Object.class)).length;
        int _lastIndexOf = s.getArgs().lastIndexOf(p);
        int _plus = (_lastIndexOf + 1);
        boolean _notEquals = (_length != _plus);
        if (_notEquals) {
          String _buf_1 = buf;
          buf = (_buf_1 + ",");
        }
      }
    }
    String _buf_2 = buf;
    buf = (_buf_2 + ")");
    Boolean _isColon = this.isColon(s);
    if ((_isColon).booleanValue()) {
      String _buf_3 = buf;
      buf = (_buf_3 + ";");
    }
    return buf;
  }
  
  public String TerminalMatchFinder(final Terminal t) {
    String buf = "";
    if ((t instanceof numRef)) {
      buf = Integer.valueOf(((numRef)t).getValue()).toString();
    }
    if ((t instanceof arrayRef)) {
      buf = ((arrayRef)t).getVarRef().getName();
      int _length = ((Object[])Conversions.unwrapArray(((arrayRef)t).getDim(), Object.class)).length;
      boolean _notEquals = (_length != 0);
      if (_notEquals) {
        EList<arrayDimension> _dim = ((arrayRef)t).getDim();
        for (final arrayDimension d : _dim) {
          varSymbol _index = d.getIndex();
          boolean _tripleNotEquals = (_index != null);
          if (_tripleNotEquals) {
            String _buf = buf;
            String _name = d.getIndex().getName();
            String _plus = ("[" + _name);
            String _plus_1 = (_plus + "]");
            buf = (_buf + _plus_1);
          } else {
            String _buf_1 = buf;
            String _string = Integer.valueOf(d.getSize()).toString();
            String _plus_2 = ("[" + _string);
            String _plus_3 = (_plus_2 + "]");
            buf = (_buf_1 + _plus_3);
          }
        }
      }
    }
    if ((t instanceof varRef)) {
      buf = ((varRef)t).getVarRef().getName();
    }
    if ((t instanceof StringRef)) {
      String _value = ((StringRef)t).getValue();
      String _plus_4 = ("\"" + _value);
      String _plus_5 = (_plus_4 + "\"");
      buf = _plus_5;
    }
    if ((t instanceof boolRef)) {
      buf = ((boolRef)t).getVarRef();
    }
    return buf;
  }
  
  public String compileAbstractMethod(final AbstractMethodCall r) {
    String _switchResult = null;
    boolean _matched = false;
    if (r instanceof StdFunction) {
      _matched=true;
      _switchResult = this.compileStdFunction(((StdFunction)r));
    }
    if (!_matched) {
      if (r instanceof FuncCall) {
        _matched=true;
        _switchResult = this.compileFuncCall(((FuncCall)r));
      }
    }
    return _switchResult;
  }
  
  public String compileFuncCall(final FuncCall s) {
    String buf = "";
    StringConcatenation _builder = new StringConcatenation();
    String _funcName = this.funcName(s);
    _builder.append(_funcName);
    _builder.append("(");
    buf = _builder.toString();
    EList<Terminal> _args = s.getArgs();
    for (final Terminal p : _args) {
      {
        String _buf = buf;
        String _compileArgResolver = this.compileArgResolver(p);
        buf = (_buf + _compileArgResolver);
        int _length = ((Object[])Conversions.unwrapArray(s.getArgs(), Object.class)).length;
        int _lastIndexOf = s.getArgs().lastIndexOf(p);
        int _plus = (_lastIndexOf + 1);
        boolean _notEquals = (_length != _plus);
        if (_notEquals) {
          String _buf_1 = buf;
          buf = (_buf_1 + ",");
        }
      }
    }
    String _buf = buf;
    buf = (_buf + ")");
    Boolean _isColon = this.isColon(s);
    if ((_isColon).booleanValue()) {
      String _buf_1 = buf;
      buf = (_buf_1 + ";");
    }
    return buf;
  }
  
  public String compileArgResolver(final Terminal p) {
    String buf = "";
    if ((p instanceof varRef)) {
      final varSymbol vsym = ((varRef)p).getVarRef();
      if ((vsym instanceof varDeclared)) {
        buf = ((varDeclared)vsym).getName();
      }
      if ((vsym instanceof FuncParameter)) {
        buf = ((FuncParameter)vsym).getName();
      }
    }
    if ((p instanceof StringRef)) {
      String _value = ((StringRef)p).getValue();
      String _plus = ("\"" + _value);
      String _plus_1 = (_plus + "\"");
      buf = _plus_1;
    }
    if ((p instanceof numRef)) {
      buf = Integer.valueOf(((numRef)p).getValue()).toString();
    }
    return buf;
  }
  
  public String compileStdFunction(final StdFunction s) {
    String buf = "";
    StringConcatenation _builder = new StringConcatenation();
    String _name = s.getName();
    _builder.append(_name);
    _builder.append("(");
    buf = _builder.toString();
    EList<Terminal> _args = s.getArgs();
    for (final Terminal p : _args) {
      {
        String _buf = buf;
        String _compileArgResolver = this.compileArgResolver(p);
        buf = (_buf + _compileArgResolver);
        int _length = ((Object[])Conversions.unwrapArray(s.getArgs(), Object.class)).length;
        int _lastIndexOf = s.getArgs().lastIndexOf(p);
        int _plus = (_lastIndexOf + 1);
        boolean _notEquals = (_length != _plus);
        if (_notEquals) {
          String _buf_1 = buf;
          buf = (_buf_1 + ",");
        }
      }
    }
    String _buf = buf;
    buf = (_buf + ")");
    Boolean _isColon = this.isColon(s);
    if ((_isColon).booleanValue()) {
      String _buf_1 = buf;
      buf = (_buf_1 + ";");
    }
    return buf;
  }
  
  public String compileIfExpression(final IfExpression r) {
    final StringBuilder buf = new StringBuilder();
    buf.append("if(");
    buf.append(this.compileVarExpression(r.getIfconditon()));
    buf.append("){\n");
    EList<BodyStatement> _then = r.getThen();
    for (final BodyStatement t : _then) {
      buf.append(this.compileBodyStatement(t));
    }
    int _length = ((Object[])Conversions.unwrapArray(r.getElse(), Object.class)).length;
    boolean _tripleNotEquals = (_length != 0);
    if (_tripleNotEquals) {
      buf.append("}else{\n");
      EList<BodyStatement> _else = r.getElse();
      for (final BodyStatement t_1 : _else) {
        buf.append(this.compileBodyStatement(t_1));
      }
    }
    buf.append("}\n");
    return buf.toString();
  }
  
  public String compileDoWhileExpression(final DoWhileExpression r) {
    final StringBuilder buf = new StringBuilder();
    buf.append("while(");
    buf.append(this.compileVarExpression(r.getLoopConditon()));
    buf.append("){\n");
    EList<BodyStatement> _body = r.getBody();
    for (final BodyStatement t : _body) {
      buf.append(this.compileBodyStatement(t));
    }
    buf.append("}\n");
    return buf.toString();
  }
  
  /**
   * Util Area
   */
  public String typeName(final String s) {
    String buf = "";
    if (s != null) {
      switch (s) {
        case "num":
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("int");
          buf = _builder.toString();
          break;
        case "bool":
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("boolean");
          buf = _builder_1.toString();
          break;
        case "string":
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("String");
          buf = _builder_2.toString();
          break;
      }
    }
    return buf;
  }
  
  public String brkStr(final BrkStr r) {
    return "break;";
  }
  
  public String funcName(final FuncCall s) {
    final FuncDefinition funcCrossRef = s.getFunc();
    String funcname = funcCrossRef.getName();
    return funcname;
  }
  
  public Boolean isColon(final EObject s) {
    boolean isColon = true;
    if ((((s.eContainer() instanceof IfExpression) || (s.eContainer() instanceof DoWhileExpression)) || 
      (s.eContainer() instanceof varAssignment))) {
      if ((s.eContainingFeature().getName().equals("ifconditon") || s.eContainingFeature().getName().equals("loopConditon"))) {
        isColon = false;
      }
      if (((s.eContainer().eContainer() instanceof IfExpression) || 
        (s.eContainer().eContainer() instanceof DoWhileExpression))) {
        if ((s.eContainer().eContainingFeature().getName().equals("ifconditon") || 
          s.eContainer().eContainingFeature().getName().equals("loopConditon"))) {
          isColon = false;
        }
      }
    }
    return Boolean.valueOf(isColon);
  }
  
  public String toTitleCase(final String input) {
    final StringBuilder titleCase = new StringBuilder();
    boolean isFirst = true;
    char[] _charArray = input.toCharArray();
    for (final char c : _charArray) {
      {
        char ch = c;
        if (isFirst) {
          ch = Character.toTitleCase(ch);
          isFirst = false;
        } else {
          ch = Character.toLowerCase(ch);
        }
        titleCase.append(ch);
      }
    }
    return titleCase.toString();
  }
  
  public String stdfunctionModelBuilder() {
    final StringBuilder buf = new StringBuilder();
    buf.append("\n//Standard Function ======================================================\n");
    buf.append("private static void printstr(String a){ System.out.println(a); }\n");
    buf.append("private static String strjoin(String a, String b){ a = a.concat(b); return a; }\n");
    buf.append("private static String[] strsplit(String a, String b){ String[] rtn = a.split(b); return rtn; }\n");
    buf.append("private static String numtostr(int a){ String rtn = String.valueOf(a); return rtn; }\n");
    buf.append("private static void init(String[] args) {\n");
    buf.append("for (String arg : args) {\n");
    buf.append("String[] ag = arg.split(\"/\");\n");
    buf.append("map.put(ag[0], ag[1]);}}\n");
    return buf.toString();
  }
}
