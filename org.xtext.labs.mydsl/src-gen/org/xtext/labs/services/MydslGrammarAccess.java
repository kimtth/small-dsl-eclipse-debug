/*
 * generated by Xtext 2.12.0
 */
package org.xtext.labs.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MydslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DSLProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.DSLProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGlobalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGlobalVarDeclaredParserRuleCall_0_0 = (RuleCall)cGlobalAssignment_0.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFuncFuncDefinitionParserRuleCall_1_0 = (RuleCall)cFuncAssignment_1.eContents().get(0);
		private final Assignment cMainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMainMainDeclaredParserRuleCall_2_0 = (RuleCall)cMainAssignment_2.eContents().get(0);
		
		//DSLProgram:
		//	global+=varDeclared*
		//	func+=FuncDefinition*
		//	main=mainDeclared;
		@Override public ParserRule getRule() { return rule; }
		
		//global+=varDeclared* func+=FuncDefinition* main=mainDeclared
		public Group getGroup() { return cGroup; }
		
		//global+=varDeclared*
		public Assignment getGlobalAssignment_0() { return cGlobalAssignment_0; }
		
		//varDeclared
		public RuleCall getGlobalVarDeclaredParserRuleCall_0_0() { return cGlobalVarDeclaredParserRuleCall_0_0; }
		
		//func+=FuncDefinition*
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }
		
		//FuncDefinition
		public RuleCall getFuncFuncDefinitionParserRuleCall_1_0() { return cFuncFuncDefinitionParserRuleCall_1_0; }
		
		//main=mainDeclared
		public Assignment getMainAssignment_2() { return cMainAssignment_2; }
		
		//mainDeclared
		public RuleCall getMainMainDeclaredParserRuleCall_2_0() { return cMainMainDeclaredParserRuleCall_2_0; }
	}
	public class MainDeclaredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.mainDeclared");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMainDeclaredAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLaunch_mainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyBodyStatementParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//mainDeclared:
		//	{mainDeclared}
		//	'launch_main' '(' ')' '{'
		//	body+=BodyStatement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{mainDeclared} 'launch_main' '(' ')' '{' body+=BodyStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//{mainDeclared}
		public Action getMainDeclaredAction_0() { return cMainDeclaredAction_0; }
		
		//'launch_main'
		public Keyword getLaunch_mainKeyword_1() { return cLaunch_mainKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//body+=BodyStatement*
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }
		
		//BodyStatement
		public RuleCall getBodyBodyStatementParserRuleCall_5_0() { return cBodyBodyStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class BodyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.BodyStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarReturnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarDeclaredParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoWhileExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBrkStrParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAbstractMethodCallParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//BodyStatement:
		//	varExpression | varReturn | varDeclared | IfExpression | DoWhileExpression | BrkStr
		//	| AbstractMethodCall;
		@Override public ParserRule getRule() { return rule; }
		
		//varExpression | varReturn | varDeclared | IfExpression | DoWhileExpression | BrkStr | AbstractMethodCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//varExpression
		public RuleCall getVarExpressionParserRuleCall_0() { return cVarExpressionParserRuleCall_0; }
		
		//varReturn
		public RuleCall getVarReturnParserRuleCall_1() { return cVarReturnParserRuleCall_1; }
		
		//varDeclared
		public RuleCall getVarDeclaredParserRuleCall_2() { return cVarDeclaredParserRuleCall_2; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_3() { return cIfExpressionParserRuleCall_3; }
		
		//DoWhileExpression
		public RuleCall getDoWhileExpressionParserRuleCall_4() { return cDoWhileExpressionParserRuleCall_4; }
		
		//BrkStr
		public RuleCall getBrkStrParserRuleCall_5() { return cBrkStrParserRuleCall_5; }
		
		//AbstractMethodCall
		public RuleCall getAbstractMethodCallParserRuleCall_6() { return cAbstractMethodCallParserRuleCall_6; }
	}
	public class VarReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.varReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRtnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRtnTerminalParserRuleCall_1_0 = (RuleCall)cRtnAssignment_1.eContents().get(0);
		
		//varReturn:
		//	'return' rtn=Terminal;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' rtn=Terminal
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//rtn=Terminal
		public Assignment getRtnAssignment_1() { return cRtnAssignment_1; }
		
		//Terminal
		public RuleCall getRtnTerminalParserRuleCall_1_0() { return cRtnTerminalParserRuleCall_1_0; }
	}
	public class VarTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.varTypeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNumKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBoolKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//varTypeLiteral:
		//	'num' | 'string' | 'bool';
		@Override public ParserRule getRule() { return rule; }
		
		//'num' | 'string' | 'bool'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'num'
		public Keyword getNumKeyword_0() { return cNumKeyword_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//'bool'
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }
	}
	public class VarDeclaredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.varDeclared");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclaredAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cScopeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cScopeAlternatives_1_0 = (Alternatives)cScopeAssignment_1.eContents().get(0);
		private final Keyword cScopeVarKeyword_1_0_0 = (Keyword)cScopeAlternatives_1_0.eContents().get(0);
		private final Keyword cScopeValKeyword_1_0_1 = (Keyword)cScopeAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_2_1_0_0 = (RuleCall)cNameAssignment_2_1_0.eContents().get(0);
		private final Assignment cDimAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDimArrayDimensionParserRuleCall_2_1_1_0 = (RuleCall)cDimAssignment_2_1_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeVarTypeLiteralParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//varDeclared:
		//	{varDeclared} scope=('var' | 'val') (name=ValidID | name=ValidID dim+=arrayDimension+) ':' type=varTypeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//{varDeclared} scope=('var' | 'val') (name=ValidID | name=ValidID dim+=arrayDimension+) ':' type=varTypeLiteral
		public Group getGroup() { return cGroup; }
		
		//{varDeclared}
		public Action getVarDeclaredAction_0() { return cVarDeclaredAction_0; }
		
		//scope=('var' | 'val')
		public Assignment getScopeAssignment_1() { return cScopeAssignment_1; }
		
		//('var' | 'val')
		public Alternatives getScopeAlternatives_1_0() { return cScopeAlternatives_1_0; }
		
		//'var'
		public Keyword getScopeVarKeyword_1_0_0() { return cScopeVarKeyword_1_0_0; }
		
		//'val'
		public Keyword getScopeValKeyword_1_0_1() { return cScopeValKeyword_1_0_1; }
		
		//name=ValidID | name=ValidID dim+=arrayDimension+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_0() { return cNameValidIDParserRuleCall_2_0_0; }
		
		//name=ValidID dim+=arrayDimension+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2_1_0() { return cNameAssignment_2_1_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_1_0_0() { return cNameValidIDParserRuleCall_2_1_0_0; }
		
		//dim+=arrayDimension+
		public Assignment getDimAssignment_2_1_1() { return cDimAssignment_2_1_1; }
		
		//arrayDimension
		public RuleCall getDimArrayDimensionParserRuleCall_2_1_1_0() { return cDimArrayDimensionParserRuleCall_2_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=varTypeLiteral
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//varTypeLiteral
		public RuleCall getTypeVarTypeLiteralParserRuleCall_4_0() { return cTypeVarTypeLiteralParserRuleCall_4_0; }
	}
	public class VarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.varExpression");
		private final RuleCall cVarAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//varExpression:
		//	varAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//varAssignment
		public RuleCall getVarAssignmentParserRuleCall() { return cVarAssignmentParserRuleCall; }
	}
	public class VarAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.varAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cVarAssignmentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOpAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOpOperParserRuleCall_1_1_0_0 = (RuleCall)cOpAssignment_1_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightTerminalOrMethodParserRuleCall_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1.eContents().get(0);
		
		//varAssignment varExpression:
		//	Terminal ({varAssignment.left=current} (op+=oper right+=TerminalOrMethod)*);
		@Override public ParserRule getRule() { return rule; }
		
		//Terminal ({varAssignment.left=current} (op+=oper right+=TerminalOrMethod)*)
		public Group getGroup() { return cGroup; }
		
		//Terminal
		public RuleCall getTerminalParserRuleCall_0() { return cTerminalParserRuleCall_0; }
		
		//{varAssignment.left=current} (op+=oper right+=TerminalOrMethod)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{varAssignment.left=current}
		public Action getVarAssignmentLeftAction_1_0() { return cVarAssignmentLeftAction_1_0; }
		
		//(op+=oper right+=TerminalOrMethod)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//op+=oper
		public Assignment getOpAssignment_1_1_0() { return cOpAssignment_1_1_0; }
		
		//oper
		public RuleCall getOpOperParserRuleCall_1_1_0_0() { return cOpOperParserRuleCall_1_1_0_0; }
		
		//right+=TerminalOrMethod
		public Assignment getRightAssignment_1_1_1() { return cRightAssignment_1_1_1; }
		
		//TerminalOrMethod
		public RuleCall getRightTerminalOrMethodParserRuleCall_1_1_1_0() { return cRightTerminalOrMethodParserRuleCall_1_1_1_0; }
	}
	public class TerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.Terminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueNUMTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cVarRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cVarRefAlternatives_2_1_0 = (Alternatives)cVarRefAssignment_2_1.eContents().get(0);
		private final Keyword cVarRefTrueKeyword_2_1_0_0 = (Keyword)cVarRefAlternatives_2_1_0.eContents().get(0);
		private final Keyword cVarRefFalseKeyword_2_1_0_1 = (Keyword)cVarRefAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cArrayRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVarRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cVarRefVarSymbolCrossReference_3_1_0 = (CrossReference)cVarRefAssignment_3_1.eContents().get(0);
		private final RuleCall cVarRefVarSymbolIDTerminalRuleCall_3_1_0_1 = (RuleCall)cVarRefVarSymbolCrossReference_3_1_0.eContents().get(1);
		private final Assignment cDimAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDimArrayDimensionParserRuleCall_3_2_0 = (RuleCall)cDimAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cVarRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cVarRefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cVarRefVarSymbolCrossReference_4_1_0 = (CrossReference)cVarRefAssignment_4_1.eContents().get(0);
		private final RuleCall cVarRefVarSymbolIDTerminalRuleCall_4_1_0_1 = (RuleCall)cVarRefVarSymbolCrossReference_4_1_0.eContents().get(1);
		
		//Terminal:
		//	{StringRef} value=STRING | {numRef} value=NUM
		//	| {boolRef} varRef=('true' | 'false') | {arrayRef} varRef=[varSymbol] dim+=arrayDimension+
		//	| {varRef} varRef=[varSymbol];
		@Override public ParserRule getRule() { return rule; }
		
		//{StringRef} value=STRING | {numRef} value=NUM | {boolRef} varRef=('true' | 'false') | {arrayRef} varRef=[varSymbol]
		//dim+=arrayDimension+ | {varRef} varRef=[varSymbol]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StringRef} value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{StringRef}
		public Action getStringRefAction_0_0() { return cStringRefAction_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//{numRef} value=NUM
		public Group getGroup_1() { return cGroup_1; }
		
		//{numRef}
		public Action getNumRefAction_1_0() { return cNumRefAction_1_0; }
		
		//value=NUM
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//NUM
		public RuleCall getValueNUMTerminalRuleCall_1_1_0() { return cValueNUMTerminalRuleCall_1_1_0; }
		
		//{boolRef} varRef=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{boolRef}
		public Action getBoolRefAction_2_0() { return cBoolRefAction_2_0; }
		
		//varRef=('true' | 'false')
		public Assignment getVarRefAssignment_2_1() { return cVarRefAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getVarRefAlternatives_2_1_0() { return cVarRefAlternatives_2_1_0; }
		
		//'true'
		public Keyword getVarRefTrueKeyword_2_1_0_0() { return cVarRefTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getVarRefFalseKeyword_2_1_0_1() { return cVarRefFalseKeyword_2_1_0_1; }
		
		//{arrayRef} varRef=[varSymbol] dim+=arrayDimension+
		public Group getGroup_3() { return cGroup_3; }
		
		//{arrayRef}
		public Action getArrayRefAction_3_0() { return cArrayRefAction_3_0; }
		
		//varRef=[varSymbol]
		public Assignment getVarRefAssignment_3_1() { return cVarRefAssignment_3_1; }
		
		//[varSymbol]
		public CrossReference getVarRefVarSymbolCrossReference_3_1_0() { return cVarRefVarSymbolCrossReference_3_1_0; }
		
		//ID
		public RuleCall getVarRefVarSymbolIDTerminalRuleCall_3_1_0_1() { return cVarRefVarSymbolIDTerminalRuleCall_3_1_0_1; }
		
		//dim+=arrayDimension+
		public Assignment getDimAssignment_3_2() { return cDimAssignment_3_2; }
		
		//arrayDimension
		public RuleCall getDimArrayDimensionParserRuleCall_3_2_0() { return cDimArrayDimensionParserRuleCall_3_2_0; }
		
		//{varRef} varRef=[varSymbol]
		public Group getGroup_4() { return cGroup_4; }
		
		//{varRef}
		public Action getVarRefAction_4_0() { return cVarRefAction_4_0; }
		
		//varRef=[varSymbol]
		public Assignment getVarRefAssignment_4_1() { return cVarRefAssignment_4_1; }
		
		//[varSymbol]
		public CrossReference getVarRefVarSymbolCrossReference_4_1_0() { return cVarRefVarSymbolCrossReference_4_1_0; }
		
		//ID
		public RuleCall getVarRefVarSymbolIDTerminalRuleCall_4_1_0_1() { return cVarRefVarSymbolIDTerminalRuleCall_4_1_0_1; }
	}
	public class VarSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.varSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDeclaredParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//varSymbol:
		//	varDeclared | FuncParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//varDeclared | FuncParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//varDeclared
		public RuleCall getVarDeclaredParserRuleCall_0() { return cVarDeclaredParserRuleCall_0; }
		
		//FuncParameter
		public RuleCall getFuncParameterParserRuleCall_1() { return cFuncParameterParserRuleCall_1; }
	}
	public class TerminalOrMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.TerminalOrMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTerminalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractMethodCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TerminalOrMethod:
		//	Terminal | AbstractMethodCall;
		@Override public ParserRule getRule() { return rule; }
		
		//Terminal | AbstractMethodCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Terminal
		public RuleCall getTerminalParserRuleCall_0() { return cTerminalParserRuleCall_0; }
		
		//AbstractMethodCall
		public RuleCall getAbstractMethodCallParserRuleCall_1() { return cAbstractMethodCallParserRuleCall_1; }
	}
	public class ArrayDimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.arrayDimension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayDimensionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIndexAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cIndexVarSymbolCrossReference_2_0_0 = (CrossReference)cIndexAssignment_2_0.eContents().get(0);
		private final RuleCall cIndexVarSymbolIDTerminalRuleCall_2_0_0_1 = (RuleCall)cIndexVarSymbolCrossReference_2_0_0.eContents().get(1);
		private final Assignment cSizeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSizeNUMTerminalRuleCall_2_1_0 = (RuleCall)cSizeAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//arrayDimension:
		//	{arrayDimension}
		//	'[' (index=[varSymbol] | size=NUM) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{arrayDimension} '[' (index=[varSymbol] | size=NUM) ']'
		public Group getGroup() { return cGroup; }
		
		//{arrayDimension}
		public Action getArrayDimensionAction_0() { return cArrayDimensionAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//index=[varSymbol] | size=NUM
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//index=[varSymbol]
		public Assignment getIndexAssignment_2_0() { return cIndexAssignment_2_0; }
		
		//[varSymbol]
		public CrossReference getIndexVarSymbolCrossReference_2_0_0() { return cIndexVarSymbolCrossReference_2_0_0; }
		
		//ID
		public RuleCall getIndexVarSymbolIDTerminalRuleCall_2_0_0_1() { return cIndexVarSymbolIDTerminalRuleCall_2_0_0_1; }
		
		//size=NUM
		public Assignment getSizeAssignment_2_1() { return cSizeAssignment_2_1; }
		
		//NUM
		public RuleCall getSizeNUMTerminalRuleCall_2_1_0() { return cSizeNUMTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class FuncCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.FuncCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFuncCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFuncFuncDefinitionCrossReference_1_0 = (CrossReference)cFuncAssignment_1.eContents().get(0);
		private final RuleCall cFuncFuncDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cFuncFuncDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsTerminalParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsTerminalParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FuncCall:
		//	{FuncCall} func=[FuncDefinition] '(' (args+=Terminal (',' args+=Terminal)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{FuncCall} func=[FuncDefinition] '(' (args+=Terminal (',' args+=Terminal)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{FuncCall}
		public Action getFuncCallAction_0() { return cFuncCallAction_0; }
		
		//func=[FuncDefinition]
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }
		
		//[FuncDefinition]
		public CrossReference getFuncFuncDefinitionCrossReference_1_0() { return cFuncFuncDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getFuncFuncDefinitionIDTerminalRuleCall_1_0_1() { return cFuncFuncDefinitionIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(args+=Terminal (',' args+=Terminal)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//args+=Terminal
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }
		
		//Terminal
		public RuleCall getArgsTerminalParserRuleCall_3_0_0() { return cArgsTerminalParserRuleCall_3_0_0; }
		
		//(',' args+=Terminal)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//args+=Terminal
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }
		
		//Terminal
		public RuleCall getArgsTerminalParserRuleCall_3_1_1_0() { return cArgsTerminalParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FuncParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.FuncParameter");
		private final RuleCall cFuncTypedDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FuncParameter:
		//	FuncTypedDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncTypedDeclaration
		public RuleCall getFuncTypedDeclarationParserRuleCall() { return cFuncTypedDeclarationParserRuleCall; }
	}
	public class FuncTypedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.FuncTypedDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(0);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVarTypeLiteralParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//fragment FuncTypedDeclaration *:
		//	type=varTypeLiteral name=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		////kim: i don't know exactly meaning of this syntax. even not in official document. but fragment doesn't recognize as a token.
		//type=varTypeLiteral name=ValidID
		public Group getGroup() { return cGroup; }
		
		////kim: i don't know exactly meaning of this syntax. even not in official document. but fragment doesn't recognize as a token.
		//type=varTypeLiteral
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//varTypeLiteral
		public RuleCall getTypeVarTypeLiteralParserRuleCall_0_0() { return cTypeVarTypeLiteralParserRuleCall_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}
	public class FuncDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.FuncDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsFuncParameterParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsFuncParameterParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBodyStatementParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FuncDefinition:
		//	'def' name=ValidID '(' (args+=FuncParameter (',' args+=FuncParameter)*)? ')' '{'
		//	body+=BodyStatement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' name=ValidID '(' (args+=FuncParameter (',' args+=FuncParameter)*)? ')' '{' body+=BodyStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(args+=FuncParameter (',' args+=FuncParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//args+=FuncParameter
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }
		
		//FuncParameter
		public RuleCall getArgsFuncParameterParserRuleCall_3_0_0() { return cArgsFuncParameterParserRuleCall_3_0_0; }
		
		//(',' args+=FuncParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//args+=FuncParameter
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }
		
		//FuncParameter
		public RuleCall getArgsFuncParameterParserRuleCall_3_1_1_0() { return cArgsFuncParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//body+=BodyStatement*
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//BodyStatement
		public RuleCall getBodyBodyStatementParserRuleCall_6_0() { return cBodyBodyStatementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AbstractMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.AbstractMethodCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFuncCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStdFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractMethodCall:
		//	FuncCall | StdFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncCall | StdFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncCall
		public RuleCall getFuncCallParserRuleCall_0() { return cFuncCallParserRuleCall_0; }
		
		//StdFunction
		public RuleCall getStdFunctionParserRuleCall_1() { return cStdFunctionParserRuleCall_1; }
	}
	public class StdFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.StdFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStdFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStdfunctionListParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsTerminalParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsTerminalParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StdFunction:
		//	{StdFunction} name=StdfunctionList '(' (args+=Terminal (',' args+=Terminal)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{StdFunction} name=StdfunctionList '(' (args+=Terminal (',' args+=Terminal)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{StdFunction}
		public Action getStdFunctionAction_0() { return cStdFunctionAction_0; }
		
		//name=StdfunctionList
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//StdfunctionList
		public RuleCall getNameStdfunctionListParserRuleCall_1_0() { return cNameStdfunctionListParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(args+=Terminal (',' args+=Terminal)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//args+=Terminal
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }
		
		//Terminal
		public RuleCall getArgsTerminalParserRuleCall_3_0_0() { return cArgsTerminalParserRuleCall_3_0_0; }
		
		//(',' args+=Terminal)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//args+=Terminal
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }
		
		//Terminal
		public RuleCall getArgsTerminalParserRuleCall_3_1_1_0() { return cArgsTerminalParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfconditonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfconditonVarExpressionParserRuleCall_3_0 = (RuleCall)cIfconditonAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThenBodyStatementParserRuleCall_6_0 = (RuleCall)cThenAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cElseKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cElseAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cElseBodyStatementParserRuleCall_7_3_0 = (RuleCall)cElseAssignment_7_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//IfExpression:
		//	{IfExpression}
		//	'if' '(' ifconditon=varExpression ')' '{'
		//	then+=BodyStatement* (=> '}' 'else' '{'
		//	else+=BodyStatement*)?
		//	=> "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{IfExpression} 'if' '(' ifconditon=varExpression ')' '{' then+=BodyStatement* (=> '}' 'else' '{' else+=BodyStatement*)?
		//=> "}"
		public Group getGroup() { return cGroup; }
		
		//{IfExpression}
		public Action getIfExpressionAction_0() { return cIfExpressionAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//ifconditon=varExpression
		public Assignment getIfconditonAssignment_3() { return cIfconditonAssignment_3; }
		
		//varExpression
		public RuleCall getIfconditonVarExpressionParserRuleCall_3_0() { return cIfconditonVarExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//then+=BodyStatement*
		public Assignment getThenAssignment_6() { return cThenAssignment_6; }
		
		//BodyStatement
		public RuleCall getThenBodyStatementParserRuleCall_6_0() { return cThenBodyStatementParserRuleCall_6_0; }
		
		//(=> '}' 'else' '{' else+=BodyStatement*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//=> '}'
		public Keyword getRightCurlyBracketKeyword_7_0() { return cRightCurlyBracketKeyword_7_0; }
		
		//'else'
		public Keyword getElseKeyword_7_1() { return cElseKeyword_7_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_2() { return cLeftCurlyBracketKeyword_7_2; }
		
		//else+=BodyStatement*
		public Assignment getElseAssignment_7_3() { return cElseAssignment_7_3; }
		
		//BodyStatement
		public RuleCall getElseBodyStatementParserRuleCall_7_3_0() { return cElseBodyStatementParserRuleCall_7_3_0; }
		
		//=> "}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class DoWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.DoWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLoopConditonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLoopConditonVarExpressionParserRuleCall_3_0 = (RuleCall)cLoopConditonAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyBodyStatementParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DoWhileExpression:
		//	{DoWhileExpression}
		//	'while' '(' loopConditon=varExpression ')' '{'
		//	body+=BodyStatement*
		//	=> '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DoWhileExpression} 'while' '(' loopConditon=varExpression ')' '{' body+=BodyStatement* => '}'
		public Group getGroup() { return cGroup; }
		
		//{DoWhileExpression}
		public Action getDoWhileExpressionAction_0() { return cDoWhileExpressionAction_0; }
		
		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//loopConditon=varExpression
		public Assignment getLoopConditonAssignment_3() { return cLoopConditonAssignment_3; }
		
		//varExpression
		public RuleCall getLoopConditonVarExpressionParserRuleCall_3_0() { return cLoopConditonVarExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//body+=BodyStatement*
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//BodyStatement
		public RuleCall getBodyBodyStatementParserRuleCall_6_0() { return cBodyBodyStatementParserRuleCall_6_0; }
		
		//=> '}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class StdfunctionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.StdfunctionList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPrintstrKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStrjoinKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStrsplitKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNumtostrKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGetargsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//StdfunctionList:
		//	'printstr' | 'strjoin' | 'strsplit' | 'numtostr' | 'getargs';
		@Override public ParserRule getRule() { return rule; }
		
		//'printstr' | 'strjoin' | 'strsplit' | 'numtostr' | 'getargs'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'printstr'
		public Keyword getPrintstrKeyword_0() { return cPrintstrKeyword_0; }
		
		//'strjoin'
		public Keyword getStrjoinKeyword_1() { return cStrjoinKeyword_1; }
		
		//'strsplit'
		public Keyword getStrsplitKeyword_2() { return cStrsplitKeyword_2; }
		
		//'numtostr'
		public Keyword getNumtostrKeyword_3() { return cNumtostrKeyword_3; }
		
		//'getargs'
		public Keyword getGetargsKeyword_4() { return cGetargsKeyword_4; }
	}
	public class BrkStrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.BrkStr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBrkStrAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBrkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cBrkBreakKeyword_1_0 = (Keyword)cBrkAssignment_1.eContents().get(0);
		
		//BrkStr:
		//	{BrkStr} brk='break';
		@Override public ParserRule getRule() { return rule; }
		
		//{BrkStr} brk='break'
		public Group getGroup() { return cGroup; }
		
		//{BrkStr}
		public Action getBrkStrAction_0() { return cBrkStrAction_0; }
		
		//brk='break'
		public Assignment getBrkAssignment_1() { return cBrkAssignment_1; }
		
		//'break'
		public Keyword getBrkBreakKeyword_1_0() { return cBrkBreakKeyword_1_0; }
	}
	public class OperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.oper");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEqualsSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cExclamationMarkEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cGreaterThanSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cAndKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cOrKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		
		//oper:
		//	'-' | '+' | '/' | '*' | '>=' | '<=' | '==' | '!=' | '<' | '>' | '=' | 'and' | 'or';
		@Override public ParserRule getRule() { return rule; }
		
		//'-' | '+' | '/' | '*' | '>=' | '<=' | '==' | '!=' | '<' | '>' | '=' | 'and' | 'or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_5() { return cLessThanSignEqualsSignKeyword_5; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_6() { return cEqualsSignEqualsSignKeyword_6; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_7() { return cExclamationMarkEqualsSignKeyword_7; }
		
		//'<'
		public Keyword getLessThanSignKeyword_8() { return cLessThanSignKeyword_8; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_9() { return cGreaterThanSignKeyword_9; }
		
		//'='
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }
		
		//'and'
		public Keyword getAndKeyword_11() { return cAndKeyword_11; }
		
		//'or'
		public Keyword getOrKeyword_12() { return cOrKeyword_12; }
	}
	
	
	private final DSLProgramElements pDSLProgram;
	private final MainDeclaredElements pMainDeclared;
	private final BodyStatementElements pBodyStatement;
	private final VarReturnElements pVarReturn;
	private final VarTypeLiteralElements pVarTypeLiteral;
	private final VarDeclaredElements pVarDeclared;
	private final VarExpressionElements pVarExpression;
	private final VarAssignmentElements pVarAssignment;
	private final TerminalElements pTerminal;
	private final VarSymbolElements pVarSymbol;
	private final TerminalOrMethodElements pTerminalOrMethod;
	private final ArrayDimensionElements pArrayDimension;
	private final FuncCallElements pFuncCall;
	private final FuncParameterElements pFuncParameter;
	private final FuncTypedDeclarationElements pFuncTypedDeclaration;
	private final FuncDefinitionElements pFuncDefinition;
	private final AbstractMethodCallElements pAbstractMethodCall;
	private final StdFunctionElements pStdFunction;
	private final IfExpressionElements pIfExpression;
	private final DoWhileExpressionElements pDoWhileExpression;
	private final StdfunctionListElements pStdfunctionList;
	private final BrkStrElements pBrkStr;
	private final OperElements pOper;
	private final TerminalRule tNUM;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public MydslGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pDSLProgram = new DSLProgramElements();
		this.pMainDeclared = new MainDeclaredElements();
		this.pBodyStatement = new BodyStatementElements();
		this.pVarReturn = new VarReturnElements();
		this.pVarTypeLiteral = new VarTypeLiteralElements();
		this.pVarDeclared = new VarDeclaredElements();
		this.pVarExpression = new VarExpressionElements();
		this.pVarAssignment = new VarAssignmentElements();
		this.pTerminal = new TerminalElements();
		this.pVarSymbol = new VarSymbolElements();
		this.pTerminalOrMethod = new TerminalOrMethodElements();
		this.pArrayDimension = new ArrayDimensionElements();
		this.pFuncCall = new FuncCallElements();
		this.pFuncParameter = new FuncParameterElements();
		this.pFuncTypedDeclaration = new FuncTypedDeclarationElements();
		this.pFuncDefinition = new FuncDefinitionElements();
		this.pAbstractMethodCall = new AbstractMethodCallElements();
		this.pStdFunction = new StdFunctionElements();
		this.pIfExpression = new IfExpressionElements();
		this.pDoWhileExpression = new DoWhileExpressionElements();
		this.pStdfunctionList = new StdfunctionListElements();
		this.pBrkStr = new BrkStrElements();
		this.pOper = new OperElements();
		this.tNUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.labs.Mydsl.NUM");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.labs.Mydsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//DSLProgram:
	//	global+=varDeclared*
	//	func+=FuncDefinition*
	//	main=mainDeclared;
	public DSLProgramElements getDSLProgramAccess() {
		return pDSLProgram;
	}
	
	public ParserRule getDSLProgramRule() {
		return getDSLProgramAccess().getRule();
	}
	
	//mainDeclared:
	//	{mainDeclared}
	//	'launch_main' '(' ')' '{'
	//	body+=BodyStatement*
	//	'}';
	public MainDeclaredElements getMainDeclaredAccess() {
		return pMainDeclared;
	}
	
	public ParserRule getMainDeclaredRule() {
		return getMainDeclaredAccess().getRule();
	}
	
	//BodyStatement:
	//	varExpression | varReturn | varDeclared | IfExpression | DoWhileExpression | BrkStr
	//	| AbstractMethodCall;
	public BodyStatementElements getBodyStatementAccess() {
		return pBodyStatement;
	}
	
	public ParserRule getBodyStatementRule() {
		return getBodyStatementAccess().getRule();
	}
	
	//varReturn:
	//	'return' rtn=Terminal;
	public VarReturnElements getVarReturnAccess() {
		return pVarReturn;
	}
	
	public ParserRule getVarReturnRule() {
		return getVarReturnAccess().getRule();
	}
	
	//varTypeLiteral:
	//	'num' | 'string' | 'bool';
	public VarTypeLiteralElements getVarTypeLiteralAccess() {
		return pVarTypeLiteral;
	}
	
	public ParserRule getVarTypeLiteralRule() {
		return getVarTypeLiteralAccess().getRule();
	}
	
	//varDeclared:
	//	{varDeclared} scope=('var' | 'val') (name=ValidID | name=ValidID dim+=arrayDimension+) ':' type=varTypeLiteral;
	public VarDeclaredElements getVarDeclaredAccess() {
		return pVarDeclared;
	}
	
	public ParserRule getVarDeclaredRule() {
		return getVarDeclaredAccess().getRule();
	}
	
	//varExpression:
	//	varAssignment;
	public VarExpressionElements getVarExpressionAccess() {
		return pVarExpression;
	}
	
	public ParserRule getVarExpressionRule() {
		return getVarExpressionAccess().getRule();
	}
	
	//varAssignment varExpression:
	//	Terminal ({varAssignment.left=current} (op+=oper right+=TerminalOrMethod)*);
	public VarAssignmentElements getVarAssignmentAccess() {
		return pVarAssignment;
	}
	
	public ParserRule getVarAssignmentRule() {
		return getVarAssignmentAccess().getRule();
	}
	
	//Terminal:
	//	{StringRef} value=STRING | {numRef} value=NUM
	//	| {boolRef} varRef=('true' | 'false') | {arrayRef} varRef=[varSymbol] dim+=arrayDimension+
	//	| {varRef} varRef=[varSymbol];
	public TerminalElements getTerminalAccess() {
		return pTerminal;
	}
	
	public ParserRule getTerminalRule() {
		return getTerminalAccess().getRule();
	}
	
	//varSymbol:
	//	varDeclared | FuncParameter;
	public VarSymbolElements getVarSymbolAccess() {
		return pVarSymbol;
	}
	
	public ParserRule getVarSymbolRule() {
		return getVarSymbolAccess().getRule();
	}
	
	//TerminalOrMethod:
	//	Terminal | AbstractMethodCall;
	public TerminalOrMethodElements getTerminalOrMethodAccess() {
		return pTerminalOrMethod;
	}
	
	public ParserRule getTerminalOrMethodRule() {
		return getTerminalOrMethodAccess().getRule();
	}
	
	//arrayDimension:
	//	{arrayDimension}
	//	'[' (index=[varSymbol] | size=NUM) ']';
	public ArrayDimensionElements getArrayDimensionAccess() {
		return pArrayDimension;
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}
	
	//FuncCall:
	//	{FuncCall} func=[FuncDefinition] '(' (args+=Terminal (',' args+=Terminal)*)? ')';
	public FuncCallElements getFuncCallAccess() {
		return pFuncCall;
	}
	
	public ParserRule getFuncCallRule() {
		return getFuncCallAccess().getRule();
	}
	
	//FuncParameter:
	//	FuncTypedDeclaration;
	public FuncParameterElements getFuncParameterAccess() {
		return pFuncParameter;
	}
	
	public ParserRule getFuncParameterRule() {
		return getFuncParameterAccess().getRule();
	}
	
	//fragment FuncTypedDeclaration *:
	//	type=varTypeLiteral name=ValidID;
	public FuncTypedDeclarationElements getFuncTypedDeclarationAccess() {
		return pFuncTypedDeclaration;
	}
	
	public ParserRule getFuncTypedDeclarationRule() {
		return getFuncTypedDeclarationAccess().getRule();
	}
	
	//FuncDefinition:
	//	'def' name=ValidID '(' (args+=FuncParameter (',' args+=FuncParameter)*)? ')' '{'
	//	body+=BodyStatement*
	//	'}';
	public FuncDefinitionElements getFuncDefinitionAccess() {
		return pFuncDefinition;
	}
	
	public ParserRule getFuncDefinitionRule() {
		return getFuncDefinitionAccess().getRule();
	}
	
	//AbstractMethodCall:
	//	FuncCall | StdFunction;
	public AbstractMethodCallElements getAbstractMethodCallAccess() {
		return pAbstractMethodCall;
	}
	
	public ParserRule getAbstractMethodCallRule() {
		return getAbstractMethodCallAccess().getRule();
	}
	
	//StdFunction:
	//	{StdFunction} name=StdfunctionList '(' (args+=Terminal (',' args+=Terminal)*)? ')';
	public StdFunctionElements getStdFunctionAccess() {
		return pStdFunction;
	}
	
	public ParserRule getStdFunctionRule() {
		return getStdFunctionAccess().getRule();
	}
	
	//IfExpression:
	//	{IfExpression}
	//	'if' '(' ifconditon=varExpression ')' '{'
	//	then+=BodyStatement* (=> '}' 'else' '{'
	//	else+=BodyStatement*)?
	//	=> "}";
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	//DoWhileExpression:
	//	{DoWhileExpression}
	//	'while' '(' loopConditon=varExpression ')' '{'
	//	body+=BodyStatement*
	//	=> '}';
	public DoWhileExpressionElements getDoWhileExpressionAccess() {
		return pDoWhileExpression;
	}
	
	public ParserRule getDoWhileExpressionRule() {
		return getDoWhileExpressionAccess().getRule();
	}
	
	//StdfunctionList:
	//	'printstr' | 'strjoin' | 'strsplit' | 'numtostr' | 'getargs';
	public StdfunctionListElements getStdfunctionListAccess() {
		return pStdfunctionList;
	}
	
	public ParserRule getStdfunctionListRule() {
		return getStdfunctionListAccess().getRule();
	}
	
	//BrkStr:
	//	{BrkStr} brk='break';
	public BrkStrElements getBrkStrAccess() {
		return pBrkStr;
	}
	
	public ParserRule getBrkStrRule() {
		return getBrkStrAccess().getRule();
	}
	
	//oper:
	//	'-' | '+' | '/' | '*' | '>=' | '<=' | '==' | '!=' | '<' | '>' | '=' | 'and' | 'or';
	public OperElements getOperAccess() {
		return pOper;
	}
	
	public ParserRule getOperRule() {
		return getOperAccess().getRule();
	}
	
	//terminal NUM returns ecore::EInt:
	//	'0'..'9'* ('.' '0'..'9'+)?;
	public TerminalRule getNUMRule() {
		return tNUM;
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
