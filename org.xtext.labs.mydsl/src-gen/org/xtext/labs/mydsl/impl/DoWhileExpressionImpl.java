/**
 * generated by Xtext 2.12.0
 */
package org.xtext.labs.mydsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.labs.mydsl.BodyStatement;
import org.xtext.labs.mydsl.DoWhileExpression;
import org.xtext.labs.mydsl.MydslPackage;
import org.xtext.labs.mydsl.varExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Do While Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.labs.mydsl.impl.DoWhileExpressionImpl#getLoopConditon <em>Loop Conditon</em>}</li>
 *   <li>{@link org.xtext.labs.mydsl.impl.DoWhileExpressionImpl#getBody <em>Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DoWhileExpressionImpl extends BodyStatementImpl implements DoWhileExpression
{
  /**
   * The cached value of the '{@link #getLoopConditon() <em>Loop Conditon</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoopConditon()
   * @generated
   * @ordered
   */
  protected varExpression loopConditon;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected EList<BodyStatement> body;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DoWhileExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MydslPackage.Literals.DO_WHILE_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public varExpression getLoopConditon()
  {
    return loopConditon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLoopConditon(varExpression newLoopConditon, NotificationChain msgs)
  {
    varExpression oldLoopConditon = loopConditon;
    loopConditon = newLoopConditon;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MydslPackage.DO_WHILE_EXPRESSION__LOOP_CONDITON, oldLoopConditon, newLoopConditon);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLoopConditon(varExpression newLoopConditon)
  {
    if (newLoopConditon != loopConditon)
    {
      NotificationChain msgs = null;
      if (loopConditon != null)
        msgs = ((InternalEObject)loopConditon).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MydslPackage.DO_WHILE_EXPRESSION__LOOP_CONDITON, null, msgs);
      if (newLoopConditon != null)
        msgs = ((InternalEObject)newLoopConditon).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MydslPackage.DO_WHILE_EXPRESSION__LOOP_CONDITON, null, msgs);
      msgs = basicSetLoopConditon(newLoopConditon, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MydslPackage.DO_WHILE_EXPRESSION__LOOP_CONDITON, newLoopConditon, newLoopConditon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<BodyStatement> getBody()
  {
    if (body == null)
    {
      body = new EObjectContainmentEList<BodyStatement>(BodyStatement.class, this, MydslPackage.DO_WHILE_EXPRESSION__BODY);
    }
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MydslPackage.DO_WHILE_EXPRESSION__LOOP_CONDITON:
        return basicSetLoopConditon(null, msgs);
      case MydslPackage.DO_WHILE_EXPRESSION__BODY:
        return ((InternalEList<?>)getBody()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MydslPackage.DO_WHILE_EXPRESSION__LOOP_CONDITON:
        return getLoopConditon();
      case MydslPackage.DO_WHILE_EXPRESSION__BODY:
        return getBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MydslPackage.DO_WHILE_EXPRESSION__LOOP_CONDITON:
        setLoopConditon((varExpression)newValue);
        return;
      case MydslPackage.DO_WHILE_EXPRESSION__BODY:
        getBody().clear();
        getBody().addAll((Collection<? extends BodyStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MydslPackage.DO_WHILE_EXPRESSION__LOOP_CONDITON:
        setLoopConditon((varExpression)null);
        return;
      case MydslPackage.DO_WHILE_EXPRESSION__BODY:
        getBody().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MydslPackage.DO_WHILE_EXPRESSION__LOOP_CONDITON:
        return loopConditon != null;
      case MydslPackage.DO_WHILE_EXPRESSION__BODY:
        return body != null && !body.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DoWhileExpressionImpl
