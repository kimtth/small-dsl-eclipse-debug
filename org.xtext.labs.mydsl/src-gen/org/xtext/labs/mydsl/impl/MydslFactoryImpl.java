/**
 * generated by Xtext 2.12.0
 */
package org.xtext.labs.mydsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.labs.mydsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MydslFactoryImpl extends EFactoryImpl implements MydslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MydslFactory init()
  {
    try
    {
      MydslFactory theMydslFactory = (MydslFactory)EPackage.Registry.INSTANCE.getEFactory(MydslPackage.eNS_URI);
      if (theMydslFactory != null)
      {
        return theMydslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MydslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MydslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MydslPackage.DSL_PROGRAM: return createDSLProgram();
      case MydslPackage.MAIN_DECLARED: return createmainDeclared();
      case MydslPackage.BODY_STATEMENT: return createBodyStatement();
      case MydslPackage.VAR_RETURN: return createvarReturn();
      case MydslPackage.VAR_DECLARED: return createvarDeclared();
      case MydslPackage.VAR_EXPRESSION: return createvarExpression();
      case MydslPackage.TERMINAL: return createTerminal();
      case MydslPackage.VAR_SYMBOL: return createvarSymbol();
      case MydslPackage.TERMINAL_OR_METHOD: return createTerminalOrMethod();
      case MydslPackage.ARRAY_DIMENSION: return createarrayDimension();
      case MydslPackage.FUNC_CALL: return createFuncCall();
      case MydslPackage.FUNC_PARAMETER: return createFuncParameter();
      case MydslPackage.FUNC_DEFINITION: return createFuncDefinition();
      case MydslPackage.ABSTRACT_METHOD_CALL: return createAbstractMethodCall();
      case MydslPackage.STD_FUNCTION: return createStdFunction();
      case MydslPackage.IF_EXPRESSION: return createIfExpression();
      case MydslPackage.DO_WHILE_EXPRESSION: return createDoWhileExpression();
      case MydslPackage.BRK_STR: return createBrkStr();
      case MydslPackage.VAR_ASSIGNMENT: return createvarAssignment();
      case MydslPackage.STRING_REF: return createStringRef();
      case MydslPackage.NUM_REF: return createnumRef();
      case MydslPackage.BOOL_REF: return createboolRef();
      case MydslPackage.ARRAY_REF: return createarrayRef();
      case MydslPackage.VAR_REF: return createvarRef();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DSLProgram createDSLProgram()
  {
    DSLProgramImpl dslProgram = new DSLProgramImpl();
    return dslProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public mainDeclared createmainDeclared()
  {
    mainDeclaredImpl mainDeclared = new mainDeclaredImpl();
    return mainDeclared;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BodyStatement createBodyStatement()
  {
    BodyStatementImpl bodyStatement = new BodyStatementImpl();
    return bodyStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public varReturn createvarReturn()
  {
    varReturnImpl varReturn = new varReturnImpl();
    return varReturn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public varDeclared createvarDeclared()
  {
    varDeclaredImpl varDeclared = new varDeclaredImpl();
    return varDeclared;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public varExpression createvarExpression()
  {
    varExpressionImpl varExpression = new varExpressionImpl();
    return varExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Terminal createTerminal()
  {
    TerminalImpl terminal = new TerminalImpl();
    return terminal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public varSymbol createvarSymbol()
  {
    varSymbolImpl varSymbol = new varSymbolImpl();
    return varSymbol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TerminalOrMethod createTerminalOrMethod()
  {
    TerminalOrMethodImpl terminalOrMethod = new TerminalOrMethodImpl();
    return terminalOrMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public arrayDimension createarrayDimension()
  {
    arrayDimensionImpl arrayDimension = new arrayDimensionImpl();
    return arrayDimension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncCall createFuncCall()
  {
    FuncCallImpl funcCall = new FuncCallImpl();
    return funcCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncParameter createFuncParameter()
  {
    FuncParameterImpl funcParameter = new FuncParameterImpl();
    return funcParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FuncDefinition createFuncDefinition()
  {
    FuncDefinitionImpl funcDefinition = new FuncDefinitionImpl();
    return funcDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractMethodCall createAbstractMethodCall()
  {
    AbstractMethodCallImpl abstractMethodCall = new AbstractMethodCallImpl();
    return abstractMethodCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StdFunction createStdFunction()
  {
    StdFunctionImpl stdFunction = new StdFunctionImpl();
    return stdFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfExpression createIfExpression()
  {
    IfExpressionImpl ifExpression = new IfExpressionImpl();
    return ifExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DoWhileExpression createDoWhileExpression()
  {
    DoWhileExpressionImpl doWhileExpression = new DoWhileExpressionImpl();
    return doWhileExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrkStr createBrkStr()
  {
    BrkStrImpl brkStr = new BrkStrImpl();
    return brkStr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public varAssignment createvarAssignment()
  {
    varAssignmentImpl varAssignment = new varAssignmentImpl();
    return varAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringRef createStringRef()
  {
    StringRefImpl stringRef = new StringRefImpl();
    return stringRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public numRef createnumRef()
  {
    numRefImpl numRef = new numRefImpl();
    return numRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolRef createboolRef()
  {
    boolRefImpl boolRef = new boolRefImpl();
    return boolRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public arrayRef createarrayRef()
  {
    arrayRefImpl arrayRef = new arrayRefImpl();
    return arrayRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public varRef createvarRef()
  {
    varRefImpl varRef = new varRefImpl();
    return varRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MydslPackage getMydslPackage()
  {
    return (MydslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MydslPackage getPackage()
  {
    return MydslPackage.eINSTANCE;
  }

} //MydslFactoryImpl
