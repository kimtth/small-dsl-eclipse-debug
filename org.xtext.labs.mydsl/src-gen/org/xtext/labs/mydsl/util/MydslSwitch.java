/**
 * generated by Xtext 2.12.0
 */
package org.xtext.labs.mydsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.labs.mydsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.labs.mydsl.MydslPackage
 * @generated
 */
public class MydslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MydslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MydslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MydslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MydslPackage.DSL_PROGRAM:
      {
        DSLProgram dslProgram = (DSLProgram)theEObject;
        T result = caseDSLProgram(dslProgram);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.MAIN_DECLARED:
      {
        mainDeclared mainDeclared = (mainDeclared)theEObject;
        T result = casemainDeclared(mainDeclared);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.BODY_STATEMENT:
      {
        BodyStatement bodyStatement = (BodyStatement)theEObject;
        T result = caseBodyStatement(bodyStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.VAR_RETURN:
      {
        varReturn varReturn = (varReturn)theEObject;
        T result = casevarReturn(varReturn);
        if (result == null) result = caseBodyStatement(varReturn);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.VAR_DECLARED:
      {
        varDeclared varDeclared = (varDeclared)theEObject;
        T result = casevarDeclared(varDeclared);
        if (result == null) result = caseBodyStatement(varDeclared);
        if (result == null) result = casevarSymbol(varDeclared);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.VAR_EXPRESSION:
      {
        varExpression varExpression = (varExpression)theEObject;
        T result = casevarExpression(varExpression);
        if (result == null) result = caseBodyStatement(varExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.TERMINAL:
      {
        Terminal terminal = (Terminal)theEObject;
        T result = caseTerminal(terminal);
        if (result == null) result = casevarExpression(terminal);
        if (result == null) result = caseTerminalOrMethod(terminal);
        if (result == null) result = caseBodyStatement(terminal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.VAR_SYMBOL:
      {
        varSymbol varSymbol = (varSymbol)theEObject;
        T result = casevarSymbol(varSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.TERMINAL_OR_METHOD:
      {
        TerminalOrMethod terminalOrMethod = (TerminalOrMethod)theEObject;
        T result = caseTerminalOrMethod(terminalOrMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.ARRAY_DIMENSION:
      {
        arrayDimension arrayDimension = (arrayDimension)theEObject;
        T result = casearrayDimension(arrayDimension);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.FUNC_CALL:
      {
        FuncCall funcCall = (FuncCall)theEObject;
        T result = caseFuncCall(funcCall);
        if (result == null) result = caseAbstractMethodCall(funcCall);
        if (result == null) result = caseBodyStatement(funcCall);
        if (result == null) result = caseTerminalOrMethod(funcCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.FUNC_PARAMETER:
      {
        FuncParameter funcParameter = (FuncParameter)theEObject;
        T result = caseFuncParameter(funcParameter);
        if (result == null) result = casevarSymbol(funcParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.FUNC_DEFINITION:
      {
        FuncDefinition funcDefinition = (FuncDefinition)theEObject;
        T result = caseFuncDefinition(funcDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.ABSTRACT_METHOD_CALL:
      {
        AbstractMethodCall abstractMethodCall = (AbstractMethodCall)theEObject;
        T result = caseAbstractMethodCall(abstractMethodCall);
        if (result == null) result = caseBodyStatement(abstractMethodCall);
        if (result == null) result = caseTerminalOrMethod(abstractMethodCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.STD_FUNCTION:
      {
        StdFunction stdFunction = (StdFunction)theEObject;
        T result = caseStdFunction(stdFunction);
        if (result == null) result = caseAbstractMethodCall(stdFunction);
        if (result == null) result = caseBodyStatement(stdFunction);
        if (result == null) result = caseTerminalOrMethod(stdFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.IF_EXPRESSION:
      {
        IfExpression ifExpression = (IfExpression)theEObject;
        T result = caseIfExpression(ifExpression);
        if (result == null) result = caseBodyStatement(ifExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.DO_WHILE_EXPRESSION:
      {
        DoWhileExpression doWhileExpression = (DoWhileExpression)theEObject;
        T result = caseDoWhileExpression(doWhileExpression);
        if (result == null) result = caseBodyStatement(doWhileExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.BRK_STR:
      {
        BrkStr brkStr = (BrkStr)theEObject;
        T result = caseBrkStr(brkStr);
        if (result == null) result = caseBodyStatement(brkStr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.VAR_ASSIGNMENT:
      {
        varAssignment varAssignment = (varAssignment)theEObject;
        T result = casevarAssignment(varAssignment);
        if (result == null) result = casevarExpression(varAssignment);
        if (result == null) result = caseBodyStatement(varAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.STRING_REF:
      {
        StringRef stringRef = (StringRef)theEObject;
        T result = caseStringRef(stringRef);
        if (result == null) result = caseTerminal(stringRef);
        if (result == null) result = casevarExpression(stringRef);
        if (result == null) result = caseTerminalOrMethod(stringRef);
        if (result == null) result = caseBodyStatement(stringRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.NUM_REF:
      {
        numRef numRef = (numRef)theEObject;
        T result = casenumRef(numRef);
        if (result == null) result = caseTerminal(numRef);
        if (result == null) result = casevarExpression(numRef);
        if (result == null) result = caseTerminalOrMethod(numRef);
        if (result == null) result = caseBodyStatement(numRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.BOOL_REF:
      {
        boolRef boolRef = (boolRef)theEObject;
        T result = caseboolRef(boolRef);
        if (result == null) result = caseTerminal(boolRef);
        if (result == null) result = casevarExpression(boolRef);
        if (result == null) result = caseTerminalOrMethod(boolRef);
        if (result == null) result = caseBodyStatement(boolRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.ARRAY_REF:
      {
        arrayRef arrayRef = (arrayRef)theEObject;
        T result = casearrayRef(arrayRef);
        if (result == null) result = caseTerminal(arrayRef);
        if (result == null) result = casevarExpression(arrayRef);
        if (result == null) result = caseTerminalOrMethod(arrayRef);
        if (result == null) result = caseBodyStatement(arrayRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MydslPackage.VAR_REF:
      {
        varRef varRef = (varRef)theEObject;
        T result = casevarRef(varRef);
        if (result == null) result = caseTerminal(varRef);
        if (result == null) result = casevarExpression(varRef);
        if (result == null) result = caseTerminalOrMethod(varRef);
        if (result == null) result = caseBodyStatement(varRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DSL Program</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DSL Program</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDSLProgram(DSLProgram object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>main Declared</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>main Declared</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemainDeclared(mainDeclared object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Body Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Body Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBodyStatement(BodyStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>var Return</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>var Return</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevarReturn(varReturn object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>var Declared</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>var Declared</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevarDeclared(varDeclared object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>var Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>var Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevarExpression(varExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Terminal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Terminal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerminal(Terminal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>var Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>var Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevarSymbol(varSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Terminal Or Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Terminal Or Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTerminalOrMethod(TerminalOrMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>array Dimension</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>array Dimension</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casearrayDimension(arrayDimension object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncCall(FuncCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncParameter(FuncParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncDefinition(FuncDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Method Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Method Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractMethodCall(AbstractMethodCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Std Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Std Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStdFunction(StdFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExpression(IfExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Do While Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Do While Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDoWhileExpression(DoWhileExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Brk Str</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Brk Str</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBrkStr(BrkStr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>var Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>var Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevarAssignment(varAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringRef(StringRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>num Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>num Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casenumRef(numRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>bool Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>bool Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseboolRef(boolRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>array Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>array Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casearrayRef(arrayRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>var Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>var Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevarRef(varRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MydslSwitch
